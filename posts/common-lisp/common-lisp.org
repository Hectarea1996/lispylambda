#+TITLE: Introducción a Common Lisp que no introduce nada sobre el lenguaje
#+DATE: <2023-02-05 dom>

Si has leído algún libro sobre Common Lisp habrás notado que todos empiezan de la misma manera. Siempre hablan del poder que este lenguaje te da, y que ningún otro (los que no son Lisp) puede darte algo parecido. Que la flexibilidad de un lenguaje Lisp es enorme y que, sin embargo, no tienes que despedirte de la eficiencia. Que no es un lenguaje de bajo ni alto nivel, sino que es la herramienta perfecta para construir herramientas de programación. Que con cualquier otro lenguaje, tú deberías adaptarte, pero aquí, es Common Lisp el que se adapta a ti. 

Todo esto va acompañado con unas gotas de prepotencia y soberbia que me encantan, y fue esa seguridad al hablar de Common Lisp lo que me encandiló. Después de estar casi un par de años usando Common Lisp, llego a entender todo lo que decían estos autores y ves justificada esa soberbia con la que hablan sobre este lenguaje. Y es que simplemente, creo que tienen razón. 

Cuando empiezas a entender cómo funciona un Lisp, te da la sensación de que todo encaja, y encaja muy bien. Y ojo, siempre hay cosas que están hechas un poco regular, al fin y al cabo Common Lisp tiene la tira de años. Pero de nuevo, remarco que otras son como deben ser. Y esa sensación se acentúa más cuando vuelves a usar ese lenguaje preferido que tenías antes de usar Common Lisp. Ya sea C++, Java, Python o cualquier otro lenguaje mainstream, notas que ya no es lo que era. Has conocido algo mejor, y acostumbrarse de nuevo a lo no tan bueno se hace un poco difícil. 

Pero seamos también honestos, Common Lisp tiene un punto débil. Y de verdad pienso que es lo peor que le puede pasar a un lenguaje. Common Lisp no lo usa ni el tato. En un principio no debería ser tan malo, porque al final lo importante es que tú lo uses, y lo que haga el resto no tiene por qué influir. Sin embargo, este hecho resulta en la gran falta de librerías útiles para Common Lisp. Hay un par muy buenas como [[https://edicl.github.io/cl-ppcre/][cl-ppcre]] para usar expresiones regulares o [[https://ultralisp.org][ultralisp]] para que tus proyectos sean accesibles de inmediato por cualquiera. Y hay más, por supuesto. Pero te aseguro que nada más empezar verás que esa libraría que te gusta y que suele estar en todos los lenguajes, en Common Lisp no está. Y es porque nadie la ha hecho. O si la encuentras, es bastante probable que esté incompleta o no tenga documentación.

Pero para no desanimar demasiado, a pesar de haber poca gente, la hay. Y mi sensación es que los pocos que hay y que más resuenan son muy buenos programadores y son bastante activos. No hay más que ver el [[https://discord.gg/HkE57XK6][discord de Lisp]]. Todos los días suelen hablar y si preguntas algo te suelen responder casi de inmediato. También hay una [[https://github.com/CodyReichert/awesome-cl][lista de librerías]] ampliamente usadas de Common Lisp en GitHub. Es la típica lista 'awesome', pero de Common Lisp. Uno de los proyectos que más me interesan actualmente es [[https://nyxt.atlas.engineer][Nyxt]], que acaba prácticamente de nacer y está financiado por la Unión Europea. Palabras textuales de su página web: "/Nyxt is graciously funded by grants from the European Union Next Generation Internet Initiative. Specifically via the sub-grant providers NLNet and FundingBox./".

Para mí, conocer Common Lisp fue como salir de la cueva de Platón. Es como si conocieses lo bueno, la verdad, lo que está bien. Y también es cierto que es casi imposible convencer a alguien de que use o intente usar Lisp. Pero ya eso me da un poco igual. Aunque si sale el tema seguiré hablando de Common Lisp como uno de los mejores lenguajes de programación que existen y lo será por muchísimo tiempo. Pero sinceramente creo que no se puede atraer a la gente para que use Common Lisp, sino que uno mismo debe encontrarse con él. 
